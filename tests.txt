this is to store the code used for testing components and

1) Keyword map Kmap 

    keyMap* keywordTable = (keyMap*)malloc(sizeof(keyMap));
    insert(keywordTable,"if","TK_IF");
    insert(keywordTable,"else","TK_ELSE");
    insert(keywordTable,"while","TK_WHILE");
    printf("Tag associated for \"else\": %s\n",search(keywordTable,"else"));
    printf("Tag associated for \"if\": %s\n",search(keywordTable,"if"));
    printf("Tag associated for \"while\": %s\n",search(keywordTable,"while"));
    if(search(keywordTable,"not") == NULL) {
        printf("No keyword like \"not\" exists.\n");
    }
    delete(keywordTable,"else");
    if(search(keywordTable,"else") == NULL) {
        printf("No keyword like \"else\" exists.\n");
    }

random change 2



if (root->isEpsilon) {
        if(root->parent == NULL) {
            printf("----\t\t----\t\tEpsilon\t\t----\t\t<NOPARENT>\t\tYes\t\t----\n");
            fprintf(fp,"----\t\t----\t\tEpsilon\t----\t\t<NOPARENT>\t\tYes\t\t----\n");
        }
        printf("----\t\t----\t\tEpsilon\t\t----\t\t%s\t\tYes\t\t----\n",FirstAndFollowList[root->parent->nonTermIndex].symbol);
        fprintf(fp,"----\t\t----\t\tEpsilon\t----\t\t%s\t\tYes\t\t----\n",FirstAndFollowList[root->parent->nonTermIndex].symbol);
    }
    else if (root->isLeafNode){
        printf("%s\t\t%d:\t\t%s\t\t----\t\tYes\t\t----\n",root->terminal.lexeme, root->terminal.linenumber, tokenNames[root->terminal.type]);
        fprintf(fp,"%s\t\t%d:\t\t%s\t\t----\t\tYes\t\t----\n",root->terminal.lexeme, root->terminal.linenumber, tokenNames[root->terminal.type]);
    } else {
        if(root->parent == NULL) {
            printf("----\t\t----\t\t----\t\t----\t\t%s\t\tNo\t\t%s\n",FirstAndFollowList[root->parent->nonTermIndex].symbol, FirstAndFollowList[root->nonTermIndex].symbol);
            fprintf(fp,"----\t\t----\t\t----\t\t----\t\t<NOPARENT>\t\tNo\t\t%s\n",FirstAndFollowList[root->nonTermIndex].symbol);
        }
        printf("----\t\t----\t\t----\t\t----\t\t%s\t\tNo\t\t%s\n",FirstAndFollowList[root->parent->nonTermIndex].symbol, FirstAndFollowList[root->nonTermIndex].symbol);
        fprintf(fp,"----\t\t----\t\t----\t\t----\t\t%s\t\tNo\t\t%s\n",FirstAndFollowList[root->parent->nonTermIndex].symbol, FirstAndFollowList[root->nonTermIndex].symbol);
    } 


